plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.openapi.generator' version '6.2.1'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

jacoco {
    toolVersion = "0.8.12"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'com.h2database:h2'
    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.6.0.Beta2'
    implementation 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0.Beta2'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    // OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

openApiGenerate {
    generatorName = 'spring'
    inputSpec = "$rootDir/src/main/resources/OpenAPI.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = 'com.api.generated.api'
    modelPackage = 'com.api.generated.dto'
    configOptions = [
            dateLibrary      : "java8",
            openApiNullable  : "false",
            delegatePattern  : "true",
            interfaceOnly    : "true",
            useBeanValidation: "true",
    ]
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', "$buildDir/generated/src/main/java"
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: 'com/api/generated/**')
    }))
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: 'com/api/generated/**')
            }))
            limit {
                minimum = 0.8
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification